# R.vch

# Packages
## installed.packages()[, 'Package'] %>% sort %>% unique %>% str_c(collapse = ' | ')
### abind | acepack | acs | ade4 | animation | ape | aqp | arm | assertthat | backports | base | base64 | base64enc | bayesm | bayesplot | BH | bindr | bindrcpp | bitops | boa | boot | brew | broom | BRugs | car | caret | caTools | cellranger | censusr | checkmate | checkpoint | choroplethr | choroplethrMaps | chron | class | classInt | cluster | clv | coda | codetools | coefplot | colorRamps | colorspace | colourpicker | commonmark | compiler | countrycode | covr | cowplot | crayon | crosstalk | curl | data.table | datasets | DBI | dbplyr | deldir | deployrRserve | desc | devtools | dichromat | digest | dismo | doParallel | dplyr | DT | dygraphs | e1071 | ecodist | eigeninv | evaluate | expm | feather | filehash | FNN | fontBitstreamVera | fontLiberation | fontquiver | forcats | foreach | foreach | foreign | formatR | Formula | gapminder | gdata | gdtools | geoR | geoRglm | geosphere | GGally | ggmap | ggplot2 | ggplot2movies | ggpubr | ggrepel | ggsci | ggsignif | git2r | glmnet | glue | gmodels | gmp | goftest | graphics | grDevices | grid | gridBase | gridExtra | gstat | gtable | gtools | haven | here | hexbin | highr | Hmisc | hms | htmlTable | htmltools | htmlwidgets | httpuv | httr | idbr | igraph | inline | interplot | intervals | irlba | ISLR | iterators | iterators | jpeg | jsonlite | jsonlite | KernSmooth | kml | knitr | kutils | labeling | laGP | Lahman | lattice | latticeExtra | lavaan | lazyeval | lctools | LearnBayes | lme4 | longitudinalData | loo | lubridate | magic | magrittr | mapdata | mapproj | maps | maptools | maptree | margins | markdown | markovchain | MASS | MASS | matlab | Matrix | MatrixModels | matrixStats | mcmc | MCMCpack | memoise | methods | mgcv | mgcv | mice | microbenchmark | MicrosoftR | mime | miniUI | minqa | misc3d | mnormt | ModelMetrics | modelr | multcomp | multilevel | munsell | mvtnorm | ncf | ndtv | network | networkDynamic | nlme | nlme | nloptr | NMF | nnet | noncensus | numDeriv | nycflights13 | openssl | openxlsx | packrat | pacman | parallel | pbivnorm | pbkrtest | permute | pgirmess | pixmap | pkgconfig | pkgmaker | PKI | plogr | plotKML | plotly | plotrix | plyr | png | polyclip | praise | prediction | prettyunits | progress | proto | pryr | pscl | psych | purrr | quadprog | quantreg | R2OpenBUGS | R6 | R6 | RandomFields | RandomFieldsUtils | randomForest | randomNames | rappdirs | raster | RColorBrewer | Rcpp | RcppArmadillo | RcppEigen | RcppParallel | RCurl | readODS | readr | readstata13 | readxl | registry | rematch | reshape | reshape2 | RevoIOQ | RevoMods | RevoUtils | RevoUtilsMath | rex | rgdal | rgeos | rgl | RgoogleMaps | rio | rJava | rjson | RJSONIO | rlang | rmarkdown | rngtools | rockchalk | RODBC | roxygen2 | rpart | rpart | RPostgreSQL | rprojroot | RSAGA | RSclient | rsconnect | Rserve | rstan | rstanarm | rstantools | rstudioapi | RUnit | rvest | sandwich | scales | selectr | sf | shapefiles | shiny | shinyjs | shinystan | shinythemes | sna | sourcetools | sp | spacetime | SparseM | spatial | SpatialPack | spatstat | spatstat.utils | spBayes | spdep | splancs | splines | srvyr | StanHeaders | statnet.common | stats | stats4 | stringdist | stringi | stringr | survey | survival | svglite | tcltk | tensor | testit | testthat | tgp | TH.data | threejs | tibble | tidyr | tidyselect | tidyverse | tigris | tikzDevice | tint | tools | translations | triebeard | tufte | udunits2 | units | urltools | UScensus2010 | useful | utils | uuid | vdiffr | vegan | viridis | viridisLite | WDI | webshot | weights | whisker | withr | wrapr | xlsx | xlsxjars | XML | xml2 | xtable | xts | yaml | zip | zoo
<package> :=
	( GG plot 2=ggplot2 | G galley=GGally | glue
	| plot Lee=plotly
	| Tidyverse=tidyverse | D plier=dplyr | Tidier=tidyr
	| Reader=readr | tibble | lubridate | feather | Read XL=readxl
	| purr=purrr
	| C data=cdata
	| Stringer=stringr | My greeter=magrittr
	| viridis | Wrapper=wrapr 
	| splines
	| caret | N net=nnet | E 1071=e1071
	| Test that=testthat | R unit=RUnit 
	| developer tools=devtools | remotes | use this=usethis
	| RG doll=rgdal | SF=sf | raster | LA GP=laGP | SP=sp
	| Map tools=maptools | Map data=mapdata
	| GG pub or=ggpubr | choropleth R=choroplethr
	| MASS | mice | String distance=stringdist
	| ISLR | Rock chalk=rockchalk | K utilities=kutils
	| R language=rlang
	| shiny | shiny load test=shinyloadtest
	| Shiny dashboard=shinydashboard
	| here | Pac-Man=pacman | Micro benchmark=microbenchmark
	| base | stats | You till=util
	| CE API=ceapi | SM viz.=smvis | CPPR=cppr
	);
Package <package> = "'" $1 "'";
Prefix <package> = $1 "::";

# R code to generate a starting point for commands:
# gen <- function(packageName) { library('magrittr'); library('rlang'); library(packageName, character.only=TRUE); glue::glue('package:{packageName}') %>% ls() %>% {fun <- .; glue::glue('{fun}="{packageName}::{fun}"') } %>% paste0(collapse = '\n\t| ') %>% cat('\n') }; gen('purrr')
<functions> :=
	## Base R
	# base
	( function
	| concatenate=c | list | vector | matrix
	| library 
	| If else=base::ifelse
	| Is not applicable=base::is.na | Is null=base::is.null
	| length=base::length | lengths=base::lengths | levels=base::levels
	| Sequence=base::seq
	| print | dim=base::dim | dimension=base::dim
	| sample=base::sample | mean=base::mean
	| minimum=base::min | maximum=base::max
	| Parallel minimum=base::min | Parallel maximum=base::max
	| Unique=base::unique
	# stats
	| median=stats::median | Standard deviation=stats::sd
	| Variance=stats::var 
	| Correlation=stats::cor | Covariance=stats::cov
	| Linear model=stats::lm | Generalized linear model=stats::glm
	| QQ plot=stats::qqplot | Coefficients=stats::coef
	| NA omit=stats::na.omit | predict=stats::predict | Principal components=stats::prcomp
	# graphics
	| plot=graphics::plot | Histogram=graphics::hist
	# methods
	
	# utils
	| citation=utils::citation | data=utils::data | vignette=utils::vignette | install packages=utils::install.packages
	| Installed packages=utils::installed.packages | Structure=utils::str | View
	# Introspection
	| class | type of=typeof | Dump as input=dput
	| head | summary | attributes | names | column names=colnames | row names=rownames
	# Help
	## Specific Packages
	# devtools
	# dplyr
	| Add count=dplyr::add_count | Add row=dplyr::add_row
	| Add row names=dplyr::add_rownames
	| Add tally=dplyr::add_tally | All equal=dplyr::all_equal 
	| All variables=dplyr::all_vars | Any variables=dplyr::any_vars
	| Arrange=dplyr::arrange | Arrange all=dplyr::arrange_all
	| Arrange at=dplyr::arrange_at | Arrange if=dplyr::arrange_if
	| Benchmark tables=dplyr::bench_tbls | between=dplyr::between
	| Bind rows=dplyr::bind_rows
	| Case when=dplyr::case_when | coalesce=dplyr::coalesce
	| combine=dplyr::combine | Compare tables=dplyr::compare_tbls
	| Compare tables 2=dplyr::compare_tbls2 | contains=dplyr::contains
	| count=dplyr::count
	| Cumulative all=dplyr::cumall | Cumulative any=dplyr::cumany
	| Cumulative mean=dplyr::cummean
	| Cumulative distribution=dplyr::cume_dist
	| Current variables=dplyr::current_vars
	| Data frame=dplyr::data_frame | Dense rank=dplyr::dense_rank
	| Descending=dplyr::desc
	| Dimension description=dplyr::dim_desc
	| Starts with=dplyr::starts_with
	| Ends with=dplyr::ends_with
	| Special if else=dplyr::if_else
	| select=dplyr::select | filter=dplyr::filter
	| mutate=dplyr::mutate | sample n=dplyr::sample_n
	| rename=dplyr::rename | rename at=dplyr::rename_at
	| recode=dplyr::recode
	| mutate all=dplyr::mutate_all | mutate at=dplyr::mutate_at
	| group by=dplyr::group_by | summarize=dplyr::summarise
	| ungroup=dplyr::ungroup
	| variables=dplyr::vars | functions=dplyr::funs
	| inner join=dplyr::inner_join | left join=dplyr::left_join
	| right join=dplyr::right_join
	| full join=dplyr::full_join
	# ggplot2
	| Gigi plot=ggplot2::ggplot | AES=ggplot2::aes
	| geometry histogram=ggplot2::geom_histogram
	| geometry point=ggplot2::geom_point
	| geometry line=ggplot2::geom_line 
	| geometry simple feature=ggplot2::geom_sf
	| geometry smooth=ggplot2::geom_smooth
	| geometry error bar=ggplot2::geom_errorbar 
	| geometry horizontal error bar=ggplot2::geom_errorbarh
	| facet wrap=ggplot2::facet_wrap
	| Gigi title=ggplot2::ggtitle | labels=ggplot2::labs
	| x label=ggplot2::xlab | y label=ggplot2::ylab
	# here
	| here=here::here
	# plotly
	# purrr
	| compose="purrr::compose"
	| discard="purrr::discard"
	| done="purrr::done"
	| every="purrr::every"
	| exec="purrr::exec"
	| imap="purrr::imap"
	| imap_chr="purrr::imap_chr"
	| imap_dbl="purrr::imap_dbl"
	| imap_dfc="purrr::imap_dfc"
	| imap_dfr="purrr::imap_dfr"
	| imap_int="purrr::imap_int"
	| imap_lgl="purrr::imap_lgl"
	| imap_raw="purrr::imap_raw"
	| imodify="purrr::imodify"
	| iwalk="purrr::iwalk"
	| keep="purrr::keep"
	| lmap="purrr::lmap"
	| lmap_at="purrr::lmap_at"
	| lmap_if="purrr::lmap_if"
	| map="purrr::map"
	| map_at="purrr::map_at"
	| map_call="purrr::map_call"
	| map_chr="purrr::map_chr"
	| map_dbl="purrr::map_dbl"
	| map_depth="purrr::map_depth"
	| map_df="purrr::map_df"
	| map_dfc="purrr::map_dfc"
	| map_dfr="purrr::map_dfr"
	| map_if="purrr::map_if"
	| map_int="purrr::map_int"
	| map_lgl="purrr::map_lgl"
	| map_raw="purrr::map_raw"
	| map2="purrr::map2"
	| map2_chr="purrr::map2_chr"
	| map2_dbl="purrr::map2_dbl"
	| map2_df="purrr::map2_df"
	| map2_dfc="purrr::map2_dfc"
	| map2_dfr="purrr::map2_dfr"
	| map2_int="purrr::map2_int"
	| map2_lgl="purrr::map2_lgl"
	| map2_raw="purrr::map2_raw"
	| partial="purrr::partial"
	| pmap="purrr::pmap"
	| pmap_chr="purrr::pmap_chr"
	| pmap_dbl="purrr::pmap_dbl"
	| pmap_df="purrr::pmap_df"
	| pmap_dfc="purrr::pmap_dfc"
	| pmap_dfr="purrr::pmap_dfr"
	| pmap_int="purrr::pmap_int"
	| pmap_lgl="purrr::pmap_lgl"
	| pmap_raw="purrr::pmap_raw"
	| prepend="purrr::prepend"
	| pwalk="purrr::pwalk"
	| reduce="purrr::reduce"
	| reduce_right="purrr::reduce_right"
	| reduce2="purrr::reduce2"
	| reduce2_right="purrr::reduce2_right"
	| rep_along="purrr::rep_along"
	| transpose="purrr::transpose"
	| walk="purrr::walk"
	| walk2="purrr::walk2"
	# readr
	| Read CSV=read_csv | Write CSV=write_csv
	# remotes
	# rlang
	| Set names=rlang::set_names
	# stringr
	| String concatenate=stringr::str_c | String length=stringr::str_length
	| String detect=stringr::str_detect | String split=stringr::str_split
	| String replace=stringr::str_replace | String replace all=stringr::str_replace_all
	| String replace NA=stringr::str_replace_na | String trim=stringr::str_trim
	| String to lower=stringr::str_to_lower | String to upper=stringr::str_to_upper
	| String to title=stringr::str_to_title
	# tibble
	| tibble=tibble::tibble | tribble=tibble::tribble
	# tidyr
	| complete=tidyr::complete | nesting=tidyr::nesting | crossing=tidyr::crossing | expand=tidyr::expand | Drop NA=tidyr::drop_na | extract=tidyr::extract | fill=tidyr::fill
	| Full sequence=tidyr::full_seq | gather=tidyr::gather | nest=tidyr::next | Replace NA=tidyr::replace_na | separate=tidyr::separate
	| Separate rows=tidyr::separate_rows | spread=tidyr::spread | unite=tidyr::unite | unnest=tidyr::unnest
	);
	
Function <functions> = $1 "()" {Left}; 

<logical_operators> := ( And=" && " | Or=" || " );
<boolean_operators> := ( And=" & " | Or=" | " | Not="!" );
Logical <logical_operators> = $1;
Boolean <logical_operators> = $1;
<binary_operator> := 
	( Plus="+" | Minus="-" | Times="*" | Divided by="/"
	| Assign equals="=" | Compare equals="=="
	| To the power="^" | Exponent="^" | Modulo="%%" | Integer division="%/%"
	| In="%in%" | Matrix multiplication="%*%" | ~
	);
<binary_operator> = $1;
Fat <binary_operator> = " " $1 " ";

# Constants
NA = "NA";
True = "TRUE";
False = "FALSE";

# Keywords
If = "if () {}" {Left} {Enter} {Home} {Up} {Right_4};
Else = " else {}" {Left} {Enter};
For loop = "for ( in ) {}" {Left} {Enter} {Home} {Up} {Right_5};

# Symbols
gets [the value] = {Alt+-};
([Insert] assignment [operator] | [(gets|is)] assigned) = {Alt+-};
Is assigned to = " -> ";

# Pipes
pipe = " %>% ";
Lazy pipe = " %...>% ";
Assignment pipe = " %<>% ";
Exposition pipe = " %$% ";
T pipe = " %T>% ";
# [Insert] pipe [operator] = {Ctrl+Shift+m};

# Macros for specific projects
Pac-Man load = "if (!base::require('pacman')) utils::install.packages('pacman')" {Enter_2} "pacman::p_load(  # Load packages after installing, if necessary." {Enter_2} {Backspace} ")" {Up} {End};
